Number,Date,Source,File,Prompt,Ref_Code,Gen_Tool,Gen_Code,Correct,Note
1,2025-10-24,?graphics::plot.default,,Plot distance vs speed from the cars dataset with medium-large open blue rectangles and an 8x8 grid,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = grid(8, 8), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\npar(mfrow=c(1,1), mar=c(5,5,2,2))\nplot(cars$speed, cars$dist, type='n', xlab='Speed', ylab='Distance', main='Distance vs Speed')\nrect(cars$speed - 0.5, cars$dist - 2, cars$speed + 0.5, cars$dist + 2, col='blue', border='black', density=NULL)\ngrid()\ndev.off()",False,Correct grid spacing and use unfilled points
2,2025-10-24,,,ggplot wt vs mpg from mtcars,"library(ggplot2)\nggplot(mtcars, aes(mpg, wt)) + geom_point()\nggsave(filename, device = ""png"")",make_ggplot,"library(ggplot2)\nggplot(mtcars, aes(mpg, wt)) +\n  geom_point() +\n  labs(title = ""Weight vs MPG"", x = ""Miles per Gallon (mpg)"", y = ""Weight (wt)"")\n\nggsave(filename, device = ""png"")",True,Title and axis labels not specified by user
3,2025-10-24,,,Plot distance vs speed from the cars dataset with medium-large open blue rectangles and gridlines at the tick marks,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = grid(), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\ndf <- read.csv(""https://people.sc.fsu.edu/~jburkardt/data/csv/cars.csv"")\nplot(df$speed, df$distance, main = ""Distance vs Speed"", xlab = ""Speed"", ylab = ""Distance"", pch = 22, col = ""blue"", bg = ""lightblue"", cex = 2)\ngrid()\ndev.off()",False,Use builtin dataset
4,2025-10-24,?graphics::plot.default,,Use R's cars dataset. Make a distance-speed (y-x) plot with a lowess fit.,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = lines(stats::lowess(Speed, Distance), lty = ""dashed""), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\ndata(cars)\nplot(cars$speed, cars$dist, xlab = ""Speed (mph)"", ylab = ""Distance (ft)"", main = ""Distance vs Speed with Lowess Fit"")\nlines(lowess(cars$speed, cars$dist), col = ""blue"")\ndev.off()",True,User did not specify point or line styles and title or axis labels
5,2025-10-24,,,"Calculate y = sin(pi/5 * x) at x = 0 to 12 step by 1. In a 2x2 grid, make 4 plots with points, lines, both points and lines, and histogram-like vertical lines","## Show the different plot types\nx <- 0:12\ny <- sin(pi/5 * x)\nop <- par(mfrow = c(2,2), mar = .1+ c(2,2,3,1))\nfor (tp in c(""p"",""l"",""b"",""h"")) {\n    plot(y ~ x, type = tp, main = paste0(""plot(*, type = \"""", tp, ""\"")""))\n}\npar(op)",make_plot,"png(filename)\nx <- 0:12\ny <- sin(pi/5 * x)\nplot(x, y, main='Scatter Plot', xlab='X', ylab='Y')\ndev.off()\n\npng(filename)\nx <- 0:12\ny <- sin(pi/5 * x)\nplot(x, y, type='l', main='Line Plot', xlab='X', ylab='Y')\ndev.off()\n\npng(filename)\nx <- 0:12\ny <- sin(pi/5 * x)\nplot(x, y, main='Points and Lines', xlab='X', ylab='Y')\nlines(x, y)\ndev.off()\n\npng(filename)\nx <- 0:12\ny <- sin(pi/5 * x)\nplot(x, y, main='Histogram-like Vertical Lines', xlab='X', ylab='Y', type='n')\nfor(i in 0:12) {\n  lines(c(i, i), c(0, sin(pi/5 * i)), col='blue')\n}\ndev.off()",False,Use a single function call to make 4 plots in a 2x2 grid with mfrow()
6,2025-10-24,?graphics::barplot,,Make a barplot of gross national product for each year using the longley data,"barplot(GNP ~ Year, data = longley)",make_plot,"png(filename)\ndata(longley)\nbarplot(longley$GNP, names.arg = longley$Year, xlab = ""Year"", ylab = ""Gross National Product"", main = ""Gross National Product by Year"", col = ""blue"")\ndev.off()",True,User did not specify title
7,2025-10-24,?graphics::barplot,,"Use longley dataset, show stacked bars of numbers of employed and unemployed across years","barplot(cbind(Employed, Unemployed) ~ Year, data = longley)",make_plot,"png(filename)\ndata(longley)\nbarplot(t(as.matrix(longley[, c(""Employed"", ""Unemployed"")])), \n  beside = FALSE, \n  col = c(""blue"", ""red""), \n  names.arg = longley$Year,\n  xlab = ""Year"", \n  ylab = ""Number of People"", \n  main = ""Employed and Unemployed Across Years"")\ndev.off()",True,"User did not specify colors, legend, or title"
8,2025-10-24,?graphics::barplot,,"For the adult male passengers on the Titanic, make barplots of survivors and non-survivors subdivided by class","d.Titanic <- as.data.frame(Titanic)\nbarplot(Freq ~ Class + Survived, data = d.Titanic,\n        subset = Age == ""Adult"" & Sex == ""Male"",\n        main = ""barplot(Freq ~ Class + Survived, *)"", ylab = ""# {passengers}"", legend.text = TRUE)",make_plot,"png(filename)\n# Load the Titanic dataset from an appropriate source\nurl <- ""https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv""\ndf <- read.csv(url)\n\n# Filter for adult male passengers\nadult_men <- df[df$Sex == ""male"" & df$Age >= 18, ]\n\n# Create a table of survivors by class\nsurvivors <- table(adult_men$Survived, adult_men$Pclass)\n\n# Create barplot for survivors\nbarplot(survivors, main = ""Survivors of Titanic Among Adult Male Passengers by Class"",\n        xlab = ""Passenger Class"",\n        ylab = ""Number of Passengers"",\n        col = c(""lightblue"", ""salmon""),\n        legend = rownames(survivors),\n        beside = TRUE)\n\ndev.off()",False,"Use adult males from Titanic dataset. Use barplot to show numbers of passenger in terms of survival (x axis) and class (stacking in bars - 1,2,3,Crew)."
9,2025-10-24,?graphics::barplot,,"Using the VADeaths dataset,  plot death rates in each category with separate bars for each age range. Include a legend for age ranges and title the plot ""Death Rates in Virginia""","barplot(VADeaths, beside = TRUE,\n        col = c(""lightblue"", ""mistyrose"", ""lightcyan"",\n                ""lavender"", ""cornsilk""),\n        legend.text = rownames(VADeaths), ylim = c(0, 100))\ntitle(main = ""Death Rates in Virginia"", font.main = 4)",make_plot,"png(filename)\nbarplot(VADeaths, beside = TRUE, col = rainbow(4), \n        main = ""Death Rates in Virginia"", \n        ylab = ""Death Rates"",\n        legend = rownames(VADeaths))\ndev.off()",True,"User did not specify bar colors, y-axis range, or axis labels"
10,2025-10-24,?graphics::barplot,,"Stacked barplot of death rates in Virginia with ages indicated by shading lines, steeper for higher age","barplot(VADeaths, angle = 15+10*1:5, density = 20, col = ""black"",\n        legend.text = rownames(VADeaths))\ntitle(main = list(""Death Rates in Virginia"", font = 4))","help_package, make_plot","png(filename)\ndf <- VADeaths\nbarplot(as.matrix(df), beside=FALSE, col=rainbow(nrow(df)), las=1,\n        main=""Stacked Barplot of Death Rates in Virginia"",\n        ylab=""Death Rates"",\n        xlab=""Causes of Death"")\nabline(h = seq(0, max(rowSums(as.matrix(df))), by=10), col='black', lwd=0.7, lty=2)\ntext(x=barplot(as.matrix(df), plot=FALSE),\n     y=rowSums(df),\n     labels=rowSums(df),\n     pos=3)\ndev.off()",True,
11,2025-10-24,?graphics::boxplot,,boxplot insect counts for spray type,"boxplot(count ~ spray, data = InsectSprays, col = ""lightgray"")","help_package, help_topic, make_plot","png(filename)\nboxplot(count ~ spray, data = InsectSprays,\n        xlab = ""Type of spray"", ylab = ""Insect count"",\n        main = ""InsectSprays data"", varwidth = TRUE, col = ""lightgray"")\ndev.off()",True,
12,2025-10-24,?graphics::boxplot,,Show log response vs treatment for orchard sprays,"boxplot(decrease ~ treatment, data = OrchardSprays, col = ""bisque"", log = ""y"")","help_topic, help_package, help_topic, make_plot","png(filename)\ndf <- OrchardSprays\ndf$decrease <- log(df$decrease)  \nplot(df$treatment, df$decrease, xlab = ""Treatment"", ylab = ""Log(Response)"", main = ""Log Response vs Treatment for Orchard Sprays"")\ndev.off()",True,
13,2025-10-24,?graphics::boxplot,,"For tooth growth of guinea pigs, make side-by-side box plots of tooth length for ascorbic acid and orange juice at different vitamin C doses. Color the bars ascorbic acid - yellow and orange juice - orange","boxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset = supp == ""VC"", col = ""yellow"",\n        main = ""Guinea Pigs' Tooth Growth"",\n        xlab = ""Vitamin C dose mg"",\n        ylab = ""tooth length"",\n        xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = ""i"")\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        subset = supp == ""OJ"", col = ""orange"")\nlegend(2, 9, c(""Ascorbic acid"", ""Orange juice""),\n       fill = c(""yellow"", ""orange""))",make_plot,"png(filename)\n\t\n\tlibrary(datasets)\n\tdata(ToothGrowth)\n\t\n\t# Converting 'supp' to a factor\n\tToothGrowth$supp <- as.factor(ToothGrowth$supp)\n\t\n\t# Creating boxplots\n\tboxplot(len ~ dose * supp, data = ToothGrowth,\n\t        col = c(""yellow"", ""orange""),\n\t        main = ""Tooth Length by Vitamin C Dose"",\n\t        xlab = ""Vitamin C Dose"",\n\t        ylab = ""Tooth Length"",\n\t        names = c(""0.5 mg"", ""1.0 mg"", ""2.0 mg""),\n\t        las = 1)\n\tdev.off()",False,"No plot made: ""error"": ""'at' and 'labels' lengths differ, 6 != 3"
14,2025-10-24,?graphics::boxplot,,"For tooth growth of guinea pigs, make side-by-side box plots of tooth length for ascorbic acid and orange juice at different vitamin C doses. Color the bars ascorbic acid - yellow and orange juice - orange","boxplot(len ~ dose:supp, data = ToothGrowth,\n        boxwex = 0.5, col = c(""orange"", ""yellow""),\n        main = ""Guinea Pigs' Tooth Growth"",\n        xlab = ""Vitamin C dose mg"", ylab = ""tooth length"",\n        sep = "":"", lex.order = TRUE, ylim = c(0, 35), yaxs = ""i"")",make_plot,"png(filename)\nset.seed(123)\n\n# Load the ToothGrowth dataset\n\ndata(ToothGrowth)\n\n# Create a color vector for the boxplots\ncolors <- c(""yellow"", ""orange"")\n\n# Create a boxplot\nboxplot(len ~ supp * dose, data = ToothGrowth, \n        col = colors, \n        main = ""Tooth Length by Supplement and Dose"",\n        xlab = ""Dose and Supplement"",\n        ylab = ""Tooth Length"")\n\ndev.off()",False,Correct swapped colors for orange juice and vitamin C
15,2025-10-24,?graphics::cdplot,,"You have the following data for NASA space shuttle o-ring failures where 1 means 'no' and 2 means 'yes': fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1) temperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81) Make a conditional density plot of o-ring failures given temperature","## NASA space shuttle o-ring failures\nfail <- factor(c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n                 1, 2, 1, 1, 1, 1, 1),\n               levels = 1:2, labels = c(""no"", ""yes""))\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70,\n                 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n## CD plot\ncdplot(fail ~ temperature)",run_visible,"fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\nlibrary(ggplot2)\n\ndata <- data.frame(fail, temperature)\n\n# Convert 'fail' to a factor\ndata$fail <- factor(data$fail, levels = c(1, 2), labels = c('No', 'Yes'))\n\n# Create a conditional density plot\nggplot(data, aes(x = temperature, fill = fail)) + \n  geom_density(alpha = 0.5) + \n  labs(title = ""Conditional Density Plot of O-Ring Failures Given Temperature"", x = ""Temperature"", y = ""Density"") + \n  theme_minimal()",False,"Incorrect tool call; No plot made: ""error"": ""cannot coerce type 'object' to vector of type 'character'"""
17,2025-10-24,?graphics::cdplot,,"You have the following data for NASA space shuttle o-ring failures where 1 means 'no' and 2 means 'yes': fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1) temperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81) Plot a red line showing cumulative conditional density of o-ring failures given temperature. Overlay points for failure/no failure observations plotted at probability = 1 or 0.","## NASA space shuttle o-ring failures\nfail <- factor(c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n                 1, 2, 1, 1, 1, 1, 1),\n               levels = 1:2, labels = c(""no"", ""yes""))\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70,\n                 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n## scatter plot with conditional density\ncdens <- cdplot(fail ~ temperature, plot = FALSE)\nplot(I(as.numeric(fail) - 1) ~ jitter(temperature, factor = 2),\n     xlab = ""Temperature"", ylab = ""Conditional failure probability"")\nlines(53:81, 1 - cdens[[1]](53:81), col = 2)",make_plot,"fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n# Define failure as a binary variable\nfailure <- ifelse(fail == 2, 1, 0)\n\n# Calculate cumulative density of failures\ncum_density <- cumsum(failure) / seq_along(failure)\n\n# Set up the plot\npng(filename)\nplot(temperature, cum_density, type = ""l"", col = ""red"", lwd = 2,\n     xlab = ""Temperature (F)"", ylab = ""Cumulative Conditional Density of Failures"",\n     main = ""Cumulative Conditional Density of O-Ring Failures vs. Temperature"")\n\n# Overlay points for failure/no failure\npoints(temperature, failure, pch = 19, col = ifelse(failure == 1, ""red"", ""blue""))\n\n# Add a horizontal line for reference\nabline(h = 0, col = ""grey"")\nabline(h = 1, col = ""grey"")\ndev.off()""",False,Use cdplot()
18,2025-10-24,?graphics::coplot,,For Tonga Trench Earthquakes plot latitude vs longitude conditioned on depth - use coplot() with quakes dataset,"coplot(lat ~ long | depth, data = quakes)","help_package, help_topic, make_plot","png(filename)\npar(mfrow=c(1,2))\ncoplot(lat ~ long | depth, data = quakes, layout = c(1, 1), col = ""blue"", main = ""Latitude vs Longitude conditioned on Depth"")\ndev.off()",True,
20,2025-10-24,?graphics::coplot,,For Tonga Trench Earthquakes plot latitude vs longitude conditioned on four intervals of depth with an overlap of 0.1 - use coplot() with quakes dataset,"given.depth <- co.intervals(quakes$depth, number = 4, overlap = .1)\ncoplot(lat ~ long | depth, data = quakes, given.values = given.depth, rows = 1)",make_plot,"png(filename)\n# Load the quakes dataset\n\ndata(quakes)\n\n# Define depth intervals and colors\nbreaks <- seq(0, 700, by = 100)\ncolors <- c(""blue"", ""green"", ""yellow"", ""red"")\n\n# Create coplot\ncoplot(lat ~ long | cut(depth, breaks = breaks), data = quakes, col = colors,\n       number = 4, overlap = 0.1, xlab = ""Longitude"", ylab = ""Latitude"", \n       main = ""Tonga Trench Earthquakes: Latitude vs Longitude by Depth Intervals"")\n\ndev.off()",False,Use co.intervals to calculate intervals passed as given.values to coplot()
21,2025-10-27,?graphics::coplot,,Use warp breaks data and coplot(). Plot breaks vs index (row number) conditioned on wool and tension as crossed factors.,"## given two factors\nIndex <- seq_len(nrow(warpbreaks)) # to get nicer default labels\ncoplot(breaks ~ Index | wool * tension, data = warpbreaks, show.given = 0:1)",make_plot,"png(filename)\n# Load the warpbreaks dataset\ndata(warpbreaks)\n\n# Generate the coplot\ncoplot(breaks ~ row.index | wool * tension, data = transform(warpbreaks, row.index = 1:nrow(warpbreaks)), panel = panel.smooth)\ndev.off()",True,
22,2025-10-29,?graphics::contour,,A Topographic Map of Maunga Whau (single color),"rx <- range(x <- 10*1:nrow(volcano))\nry <- range(y <- 10*1:ncol(volcano))\nry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2\ntcol <- terrain.colors(12)\npar(pty = ""s"", bg = ""lightcyan"")\nplot(x = 0, y = 0, type = ""n"", xlim = rx, ylim = ry, xlab = """", ylab = """")\nu <- par(""usr"")\nrect(u[1], u[3], u[2], u[4], col = tcol[8], border = ""red"")\ncontour(x, y, volcano, col = tcol[2], lty = ""solid"", add = TRUE,\n        vfont = c(""sans serif"", ""plain""))\ntitle(""A Topographic Map of Maunga Whau"", font = 4)\nabline(h = 200*0:4, v = 200*0:4, col = ""lightgray"", lty = 2, lwd = 0.1)",,,False,"No plot made: ""It seems that I cannot fulfill your request for a Topographic Map of Maunga Whau as there are no available artifacts or data sources to work with."""
23,2025-10-24,?graphics::contour,,A Topographic Map of Maunga Whau (single color) - use volcano data with contour(),"rx <- range(x <- 10*1:nrow(volcano))\nry <- range(y <- 10*1:ncol(volcano))\nry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2\ntcol <- terrain.colors(12)\npar(pty = ""s"", bg = ""lightcyan"")\nplot(x = 0, y = 0, type = ""n"", xlim = rx, ylim = ry, xlab = """", ylab = """")\nu <- par(""usr"")\nrect(u[1], u[3], u[2], u[4], col = tcol[8], border = ""red"")\ncontour(x, y, volcano, col = tcol[2], lty = ""solid"", add = TRUE,\n        vfont = c(""sans serif"", ""plain""))\ntitle(""A Topographic Map of Maunga Whau"", font = 4)\nabline(h = 200*0:4, v = 200*0:4, col = ""lightgray"", lty = 2, lwd = 0.1)",make_plot,"png(filename)\n# Load the volcano dataset\nvolcano_data <- as.matrix(volcano)\n\n# Generate the topographic map using contour function\ncontour(volcano_data, col = ""darkgreen"", lwd = 2, main = ""Topographic Map of Maunga Whau"", xlab = ""X-axis"", ylab = ""Y-axis"")\ndev.off()",True,
24,2025-10-24,?graphics::dotchart,,Dotplot Virginia deaths - use VADeaths and dotchart(),"dotchart(VADeaths, main = ""Death Rates in Virginia - 1940"")","help_topic(""VADeaths""), help_topic(""dotchart""), make_plot","png(filename)\n\ndotchart(VADeaths, main = ""Death Rates in Virginia - 1940"")\n\ndev.off()",True,
25,2025-10-24,?graphics::dotchart,,"Dotplot Virginia deaths with age as first group,  x axis from 0 to 100% - use VADeaths and dotchart()","op <- par(xaxs = ""i"")  # 0 -- 100%\ndotchart(t(VADeaths), xlim = c(0,100), bg = ""skyblue"",\n         main = ""Death Rates in Virginia - 1940"", xlab = ""rate [ % ]"",\n         ylab = ""Grouping:  Age  x   Urbanity . Gender"")","help_topic(""VADeaths""), help_topic(""dotchart""), make_plot","png(filename)\ndotchart(t(VADeaths), xlim = c(0, 100), bg = ""skyblue"",\n         main = ""Death Rates in Virginia - 1940"", xlab = ""Rate [%]"",\n         ylab = ""Grouping: Age x Urbanity . Gender"")\ndev.off()",True,
26,2025-10-24,?graphics::filled.contour,,Plot topography of Maunga Whau with terrain colors - use volcano data and filled.contour(),"x <- 10*1:nrow(volcano)\ny <- 10*1:ncol(volcano)\nfilled.contour(x, y, volcano,\n    color.palette = function(n) hcl.colors(n, ""terrain""),\n    plot.title = title(main = ""The Topography of Maunga Whau"",\n    xlab = ""Meters North"", ylab = ""Meters West""),\n    plot.axes = { axis(1, seq(100, 800, by = 100))\n                  axis(2, seq(100, 600, by = 100)) },\n    key.title = title(main = ""Height\n(meters)""),\n    key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1\nmtext(paste(""filled.contour(.) from"", R.version.string),\n      side = 1, line = 4, adj = 1, cex = .66)",make_plot,"png(filename)\n# Load the volcano dataset, which is a matrix\nvolcano_data <- volcano\n\n# Create a filled contour plot\nfilled.contour(volcano_data, \n               color.palette = terrain.colors,\n               xlab = ""x coordinate (meters)"",\n               ylab = ""y coordinate (meters)"",\n               main = ""Topography of Maunga Whau (Volcano Data)"")\ndev.off()",True,
27,2025-10-24,?graphics::grid,,"Plot iris sepal length vs width, color by species, ten tick marks on each axis, add grid","## change the desired number of tick marks:\npar(lab = c(10, 10, 7))\n\nwith(iris,\n     {\n     plot(Sepal.Length, Sepal.Width, col = as.integer(Species),\n          xlim = c(4, 8), ylim = c(2, 4.5), panel.first = grid(),\n          main = ""with(iris,  plot(...., panel.first = grid(), ..) )"")\n     }\n    )",make_plot,"png(filename)\n# Load iris dataset\n\ndata(iris)\n\n# Create the plot\nplot(iris$Sepal.Length, iris$Sepal.Width, \n     xlab = ""Sepal Length"", ylab = ""Sepal Width"", \n     pch = 19, col = iris$Species)\n\n# Add grid\ngrid()\n\n# Set tick marks\naxis(1, at = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 10))\naxis(2, at = seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 10))\n\ndev.off()",False,Use par(lab = ) to change number of tick marks
28,2025-10-26,?graphics::hist,,"Use islands data, plot histogram of square root of islands, 12 bars, light blue bars and pink borders","hist(sqrt(islands), breaks = 12, col = ""lightblue"", border = ""pink"")","help_topic(""islands""), help_package(""graphics""), make_plot","png(filename)\nbarplot(hist(sqrt(islands), breaks=12, plot=FALSE)$counts,\n        col='lightblue', border='pink',\n        main='Histogram of Square Root of Islands',\n        xlab='Square Root of Area',\n        ylab='Frequency')\ndev.off()",False,Missing x tick marks
29,2025-10-26,Modified from ?graphics::axis.POSIXct,,"For beaver1, make a histogram of number of observations per hour","with(beaver1, {\n    time <- strptime(paste(1990, day, time %/% 100, time %% 100), ""%Y %j %H %M"")\n    time_p <- as.POSIXct(time)\n    hist(time_p, breaks = ""hours"", freq = TRUE)\n})","help_topic(""hist""), help_topic(""beaver1""), make_plot","png(filename)\n# Create a new column for hours since the start of the day\nbeaver1$hours <- beaver1$time %/% 100 + 24 * (beaver1$day - beaver1$day[1]) + (beaver1$time %% 100) / 60\n\n# Create a histogram of the number of observations per hour\nhist(beaver1$hours, main=""Histogram of Observations per Hour"", xlab=""Hour of Observation"", col=""lightblue"", border=""black"")\ndev.off()",False,"Use breaks = ""hours"""
30,2025-10-26,?graphics::image,,"volcano data: Use image() to plot topography of Maunga Whau Volcano with terrain colors, overlay brown contour lines","x <- 10*(1:nrow(volcano))\ny <- 10*(1:ncol(volcano))\nimage(x, y, volcano, col = hcl.colors(100, ""terrain""), axes = FALSE)\ncontour(x, y, volcano, levels = seq(90, 200, by = 5),\n        add = TRUE, col = ""brown"")\naxis(1, at = seq(100, 800, by = 100))\naxis(2, at = seq(100, 600, by = 100))\nbox()\ntitle(main = ""Maunga Whau Volcano"", font.main = 4)","help_topic(""volcano""), help_topic(""image""), make_plot","png(filename)\nx <- 10*(1:nrow(volcano))\ny <- 10*(1:ncol(volcano))\nimage(x, y, volcano, col = terrain.colors(100), axes = FALSE)\ncontour(x, y, volcano, levels = seq(90, 200, by = 5), add = TRUE, col = ""brown"")\naxis(1, at = seq(100, 800, by = 100))\naxis(2, at = seq(100, 600, by = 100))\nbox()\ntitle(main = ""Maunga Whau Volcano"", font.main = 4)\ndev.off()",True,
31,2025-10-26,?graphics::lines,,cars data: scatterplot stopping distance vs speed and add a smooth line ,"plot(cars, main = ""Stopping Distance versus Speed"")\nlines(stats::lowess(cars))","help_topic(""volcano""), help_topic(""image""), make_plot","png(filename)\ndf <- cars\nplot(df$speed, df$dist, xlab = ""Speed (mph)"", ylab = ""Stopping Distance (ft)"", main = ""Stopping Distance vs Speed"")\nlines(smooth.spline(df$speed, df$dist), col = ""blue"")\ndev.off()",True,
32,2025-10-26,?graphics::matplot,,"iris data: Plot width vs length with symbols: s/v for Setosa/Versicolor, red/blue for petals/sepals, lowercase/uppercase for petals/sepals.","table(iris$Species) # is data.frame with 'Species' factor\niS <- iris$Species == ""setosa""\niV <- iris$Species == ""versicolor""\nop <- par(bg = ""bisque"")\nmatplot(c(1, 8), c(0, 4.5), type =  ""n"", xlab = ""Length"", ylab = ""Width"",\n        main = ""Petal and Sepal Dimensions in Iris Blossoms"")\nmatpoints(iris[iS,c(1,3)], iris[iS,c(2,4)], pch = ""sS"", col = c(2,4))\nmatpoints(iris[iV,c(1,3)], iris[iV,c(2,4)], pch = ""vV"", col = c(2,4))\nlegend(1, 4, c(""    Setosa Petals"", ""    Setosa Sepals"",\n               ""Versicolor Petals"", ""Versicolor Sepals""),\n       pch = ""sSvV"", col = rep(c(2,4), 2))",make_plot,"png(filename)\n# Load the iris dataset\n data(iris)\n\n# Set up the plotting symbol: s for Setosa, v for Versicolor\n symbols <- ifelse(iris$Species == ""setosa"", ""s"", ""v"")\n\n# Set up colors: red for petals, blue for sepals\n colors <- ifelse(iris$Petal.Length > 1.5, ""red"", ""blue"")\n\n# Set up case: lowercase for petals, uppercase for sepals\n case <- ifelse(iris$Petal.Length > 1.5, ""P"", ""S"")\n\n# Combine symbols, colors, and cases\n plot(iris$Sepal.Length, iris$Sepal.Width, pch=case, col=colors, cex=2,\n      xlab=""Sepal Length"", ylab=""Sepal Width"", main=""Sepal Width vs Length"")\n\n# Add legend\n legend(""topright"", legend=c(""Setosa"", ""Versicolor""), pch=c(""s"", ""v""), col=c(""red"", ""blue""), title=""Species"")\n dev.off()",False,Fix symbols and add petal data
33,2025-10-29,?graphics::matplot,,"gait data: plot angle knee vs hip. different lines for each subject, label points with subject number","iS <- 1:3 # indices of subset\nmatplot(gait[, iS, 1], gait[, iS, 2], pch = ""123"", type = ""b"",\n        col = rainbow(3, start = 0.8, end = 0.1),\n        sub = paste(iS, dimnames(gait)[[2]][iS],\n                    sep = ""="", collapse= "",  ""),\n        xlab = ""Hip angle"", ylab = ""Knee angle"",\n        main = ""Hip and knee angle while walking"")","help_package(""datasets""), help_topic(""gait""), make_plot","png(filename)\n# Load gait data\n# The gait dataset is a 3D array, we need to convert it to a format suitable for plotting\nlibrary(reshape2)\nrequire(ggplot2)\n\n# Extracting hip and knee angles for each subject\nhip_angles <- gait[,,1]\nke_angles <- gait[,,2]\nsubject_labels <- paste(""boy"", 1:39)\n\n# Create a long-format data frame for ggplot\nlong_data <- data.frame(Time = rep(seq(0.025, 0.975, by = 0.05), times = 39),\n                        Hip_Angle = as.vector(hip_angles),\n                        Knee_Angle = as.vector(ke_angles),\n                        Subject = rep(subject_labels, each = 20))\n\n# Plotting\nplot(Hip_Angle ~ Knee_Angle, data = long_data, type = 'n', xlab = 'Knee Angle (degrees)', ylab = 'Hip Angle (degrees)', main = 'Knee vs Hip Angle for Each Subject')\n\n# Add lines for each subject\nfor (s in unique(long_data$Subject)) {\n  subject_data <- subset(long_data, Subject == s)\n  lines(subject_data$Knee_Angle, subject_data$Hip_Angle, type = 'b')\n}\n\n# Add subject labels\ntext(long_data$Knee_Angle, long_data$Hip_Angle, labels = long_data$Subject, pos = 4, cex = 0.7)\n\ndev.off()",True,"No plot made: ""error"": ""there is no package called ‘fda’"""
34,2025-10-26,?graphics::mosaicplot,,mosaic plot of survival on the Titanic contingent on sex (x) and age (y),"mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)","help_topic(""Titanic""), help_package(""vcd""), make_plot","png(filename)\ndata(Titanic, package = ""vcd"")\nmosaicplot(~ Sex + Age + Survived, data = Titanic, main = ""Survival on the Titanic by Sex and Age"")\ndev.off()",True,Plot is correct but should use R's built-in Titanic dataset
35,2025-10-26,?graphics::mosaicplot,,extended mosaic plot of HairEyeColor data,"mosaicplot(HairEyeColor, shade = TRUE)",make_plot,"png(filename)\ndata(HairEyeColor)\n\n# Create a contingency table\ncontingency_table <- as.table(HairEyeColor)\n\n# Create an extended mosaic plot\nmosaicplot(contingency_table, main = ""Extended Mosaic Plot of Hair Eye Color"", color = TRUE, xlab = ""Hair Color"", ylab = ""Eye Color"")\ndev.off()",False,Use shade = TRUE for extended mosaic plot
36,2025-10-26,Modified from ?graphics::pairs,,"Make pairs plot of iris data, lower triangle only","pairs(iris[1:4], main = ""Anderson's Iris Data -- 3 species"",\n      pch = 21, bg = c(""red"", ""green3"", ""blue"")[unclass(iris$Species)], upper.panel = NULL)",make_plot,"png(filename)\npar(mfrow=c(2,2))\ndata(iris)\n\n# Lower triangle\nplot(iris[,1], iris[,2], main=""Sepal.Length vs Sepal.Width"", xlab=""Sepal.Length"", ylab=""Sepal.Width"")\n\nplot(iris[,1], iris[,3], main=""Sepal.Length vs Petal.Length"", xlab=""Sepal.Length"", ylab=""Petal.Length"")\n\nplot(iris[,1], iris[,4], main=""Sepal.Length vs Petal.Width"", xlab=""Sepal.Length"", ylab=""Petal.Width"")\n\nplot(iris[,2], iris[,3], main=""Sepal.Width vs Petal.Length"", xlab=""Sepal.Width"", ylab=""Petal.Length"")\n\nplot(iris[,2], iris[,4], main=""Sepal.Width vs Petal.Width"", xlab=""Sepal.Width"", ylab=""Petal.Width"")\n\nplot(iris[,3], iris[,4], main=""Petal.Length vs Petal.Width"", xlab=""Petal.Length"", ylab=""Petal.Width"")\n\ndev.off()",False,"Use pairs(..., upper.panel = NULL)"
37,2025-10-26,?graphics::rug,,"Make a density plot of Old Faithful eruptions, adding a rug of individual eruptions at the bottom","require(stats)  # both 'density' and its default method\nwith(faithful, {\n    plot(density(eruptions, bw = 0.15))\n    rug(eruptions)\n    rug(jitter(eruptions, amount = 0.01), side = 3, col = ""light blue"")\n})","help_topic(""faithful""), help_topic(""rug""), make_plot","png(filename)\nwith(faithful, {\n    plot(density(eruptions, bw = 0.15), main = ""Density Plot of Old Faithful Eruptions"", xlab = ""Eruption Duration (minutes)"", ylab = ""Density"")\n    rug(eruptions)\n})\ndev.off()",True,
38,2025-10-26,?graphics::spineplot,,Make a spine plot of gender vs department in UCBAdmissions,"spineplot(marginSums(UCBAdmissions, c(3, 2)),\n           main = ""Applications at UCB"")","help_package(""datasets""), help_topic(""UCBAdmissions""); make_plot","png(filename)\nbarplot(UCBAdmissions[,,1], beside=TRUE, legend.text=c(""Male"",""Female""),\n        col=c(""lightblue"",""lightpink""),\n        main=""Admissions by Gender for Dept A"",\n        xlab=""Admitted/Rejection"",\n        ylab=""Number of Students"")\ndev.off()",False,Use spineplot()
39,2025-10-26,?graphics::plot.window,,Plot MDS of eurodist data with 1:1 aspect ratio for x and y axes. Show city names instead of points.,"loc <- cmdscale(eurodist)\nrx <- range(x <- loc[,1])\nry <- range(y <- -loc[,2])\nplot(x, y, type = ""n"", asp = 1, xlab = """", ylab = """")\nabline(h = pretty(rx, 10), v = pretty(ry, 10), col = ""lightgray"")\ntext(x, y, labels(eurodist), cex = 0.8)","help_topic(""eurodist""), help_package(""MASS""), make_plot","png(filename)\nlibrary(MASS)\ndata(eurodist)\nmds_result <- isoMDS(eurodist)\nplot(mds_result$points, type = 'n', asp = 1, xlab = 'Coordinate 1', ylab = 'Coordinate 2', main = 'MDS of Eurodist Data')\ntext(mds_result$points, labels = rownames(eurodist))\ndev.off()",False,"Labels are missing: use plot(x, y, ...) and text(x, y, ...)"
40,2025-10-29,,breast-cancer.csv,"Plot worst radius (y) vs mean radius (x). Add a blue 1:1 line and title ""Breast Cancer Wisconsin (Diagnostic)"".","df <- read.csv(""data/breast-cancer.csv"")\nplot(df$radius_mean, df$radius_worst)\nabline(0, 1, col = 4)\ntitle(""Breast Cancer Wisconsin (Diagnostic)"")",make_plot,"png(filename)\n# Load the data\n df <- read.csv(""/tmp/uploads/breast-cancer.csv"")\n\n# Plot the data\n plot(df$radius_mean, df$radius_worst, xlab = ""Mean Radius"", ylab = ""Worst Radius"",\n      main = ""Breast Cancer Wisconsin (Diagnostic)"")\n\n# Add a blue 1:1 line\n abline(a = 0, b = 1, col = ""blue"")\n\n# Save the plot\n dev.off()",True,
41,2025-10-29,,breast-cancer.csv,"Use mean radius and mean perimeter from data. Calculate perimeter from 2*pi*mean radius, then calculate delta perimeter (calculated perimeter - mean perimeter). Plot delta perimeter (y) vs mean radius (x). Use symbols for diagnosis: solid red squares for M (malignant) and open black circles for B (benign). Apply 50% transparency to red and black colors.","df <- read.csv(""data/breast-cancer.csv"")\npch <- ifelse(df$diagnosis == ""M"", 15, 1)\ncol_B <- adjustcolor(1, alpha.f = 0.5)\ncol_M <- adjustcolor(2, alpha.f = 0.5)\ncol <- ifelse(df$diagnosis == ""M"", col_M, col_B)\np_calc <- df$radius_mean * 2 * pi\ndelta_p <- df$perimeter_mean - p_calc\nplot(df$radius_mean, delta_p, pch = pch, col = col)",make_plot,"png(filename)\n# Read the data from the CSV file\n\ndf <- read.csv(""/tmp/uploads/breast-cancer.csv"")\n\n# Calculate the calculated perimeter from mean radius\ncalculated_perimeter <- 2 * pi * df$mean_radius\n\n# Calculate delta perimeter\n\ndelta_perimeter <- calculated_perimeter - df$mean_perimeter\n\n# Plot delta perimeter vs mean radius with different symbols for diagnosis\nplot(df$mean_radius[df$diagnosis == 'M'], delta_perimeter[df$diagnosis == 'M'],\n     col=rgb(1, 0, 0, 0.5), pch=22, bg='red',\n     xlab=""Mean Radius"", ylab=""Delta Perimeter"",\n     main=""Delta Perimeter vs Mean Radius"")\npoints(df$mean_radius[df$diagnosis == 'B'], delta_perimeter[df$diagnosis == 'B'],\n       col=rgb(0, 0, 0, 0.5), pch=1)\n\nlegend(""topright"", legend=c(""Malignant (M)"", ""Benign (B)""),\n       pch=c(22, 1), pt.bg=c(rgb(1, 0, 0, 0.5), NA), col=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 0, 0.5)))\ndev.off()",False,No plot made (error: 'x' and 'y' lengths differ). Use df$radius_mean and df$perimeter_mean.
42,2025-10-29,,breast-cancer.csv,"Generate three metrics for radius: 1. mean radius, 2. radius calculated from mean perimeter, 3. radius calculated from mean area (calculations using basic geometry formulas). Make a long data frame with diagnosis, metric (mean, perimeter, area), and radius values. Use factor interaction (?boxplot) to show radius grouped by diagnosis and metric.","df <- read.csv(""data/breast-cancer.csv"")\nradius_peri <- df$perimeter_mean / 2 / pi\nradius_area <- sqrt(df$area_mean / pi)\nwide_df <- data.frame(diagnosis = df$diagnosis, radius_mean = df$radius_mean, radius_peri, radius_area)\nlong_df <- reshape(wide_df, direction = ""long"", varying = colnames(wide_df)[2:4], sep = ""_"", timevar = ""metric"")\nboxplot(radius ~ metric:diagnosis, data = long_df)","run_hidden, run_visible","## run_hidden\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\nbreast_cancer <- read.csv('breast-cancer.csv')\n\n# Calculate mean radius\nmean_radius <- mean(breast_cancer$radius)\n\n# Calculate radius from mean perimeter (Perimeter = 2 * pi * radius) => radius = perimeter / (2 * pi)\nmean_perimeter <- mean(breast_cancer$perimeter)\nradius_from_perimeter <- mean_perimeter / (2 * pi)\n\n# Calculate radius from mean area (Area = pi * radius^2) => radius = sqrt(area / pi)\nmean_area <- mean(breast_cancer$area)\nradius_from_area <- sqrt(mean_area / pi)\n\n# Create a long data frame with diagnosis, metric, and radius values\nradius_metrics <- data.frame(\n  diagnosis = rep(breast_cancer$diagnosis, each = 3),\n  metric = rep(c('mean', 'perimeter', 'area'), times = nrow(breast_cancer)),\n  radius_values = c(\n    rep(mean_radius, nrow(breast_cancer)),\n    rep(radius_from_perimeter, nrow(breast_cancer)),\n    rep(radius_from_area, nrow(breast_cancer))\n  )\n)\n\n## run_visible\n# Display the first few rows of the radius metrics data frame\nhead(radius_metrics)\n\n# Check structure of the data frame\nstr(radius_metrics)\n\n# Use boxplot to show radius grouped by diagnosis and metric\nboxplot(radius_values ~ diagnosis + metric, data = radius_metrics, main = 'Radius by Diagnosis and Metric', xlab = 'Diagnosis and Metric', ylab = 'Radius', las = 2, cex.axis = 0.75)",False,No plot made; use make_plot
