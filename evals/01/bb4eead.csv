Number,Date,Source,Prompt,Ref_Code,Gen_Tool,Gen_Code,Correct,Note
1,2025-10-19,?graphics::plot.default,Plot distance vs speed from the cars dataset with medium-large open blue rectangles and an 8x8 grid,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = grid(8, 8), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\n# Load the cars dataset\nnovel_cars <- cars\n\n# Create the plot with specified parameters\nplot(novel_cars$speed, novel_cars$dist, type = 'p', pch = 22, col = 'blue', bg = 'blue', cex = 1.5,\n     xlab = 'Speed', ylab = 'Distance', main = 'Distance vs Speed')\n\n# Configure the plot's grid\ngrid()  \n\n# Setting an 8x8 layout\npar(mar=c(5,5,2,2))\n\n# Adjust axis limits for better visibility\nxlim <- range(novel_cars$speed)\nylim <- range(novel_cars$dist)\npoints(novel_cars$speed, novel_cars$dist, pch = 22, col = 'blue', bg = 'blue', cex = 1.5)\ndev.off()",False,Correct grid spacing and use unfilled points
2,2025-10-19,,ggplot wt vs mpg from mtcars,"library(ggplot2)\nggplot(mtcars, aes(mpg, wt)) + geom_point()\nggsave(filename, device = ""png"")",make_ggplot,"library(ggplot2)\nggplot(mtcars, aes(mpg, wt)) +\n  geom_point() +\n  labs(title = 'Weight vs MPG', x = 'Miles Per Gallon (MPG)', y = 'Weight (1000 lbs)')\n  ggsave(filename, device = 'png')",True,Title and axis labels not specified by user
3,2025-10-20,,Plot distance vs speed from the cars dataset with medium-large open blue rectangles and gridlines at the tick marks,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = grid(), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\n# Load the cars dataset\ndf <- cars\n\n# Set up the plot\nplot(df$speed, df$dist, xlab=\""Speed (mph)\"", ylab=\""Distance (ft)\"",\n     pch=15, col='blue', cex=1.5, main=\""Distance vs Speed\"")\n\n# Add gridlines\ngrid()\n\n# Close the graphics device\ndev.off()",False,Use unfilled points
4,2025-10-20,?graphics::plot.default,Use R's cars dataset. Make a distance-speed (y-x) plot with a lowess fit.,"Speed <- cars$speed\nDistance <- cars$dist\nplot(Speed, Distance, panel.first = lines(stats::lowess(Speed, Distance), lty = ""dashed""), pch = 0, cex = 1.2, col = ""blue"")",make_plot,"png(filename)\ncars_data <- cars\nplot(cars_data$speed, cars_data$dist, xlab='Speed (mph)', ylab='Stopping Distance (ft)', main='Stopping Distance vs Speed')\nlines(lowess(cars_data$speed, cars_data$dist), col='blue', lwd=2)\ndev.off()",True,User did not specify point or line styles and title or axis labels
5,2025-10-20,,"Calculate y = sin(pi/5 * x) at x = 0 to 12 step by 1. In a 2x2 grid, make 4 plots with points, lines, both points and lines, and histogram-like vertical lines","## Show the different plot types\nx <- 0:12\ny <- sin(pi/5 * x)\nop <- par(mfrow = c(2,2), mar = .1+ c(2,2,3,1))\nfor (tp in c(""p"",""l"",""b"",""h"")) {\n    plot(y ~ x, type = tp, main = paste0(""plot(*, type = \"""", tp, ""\"")""))\n}\npar(op)",make_plot,"png(filename)\nx <- 0:12\npi_val <- pi / 5\ny <- sin(pi_val * x)\npar(mfrow = c(2, 2))\n\n# Plot with points\nplot(x, y, main = 'Plot with Points', pch = 19)\n\n# Plot with lines\nplot(x, y, type = 'l', main = 'Plot with Lines')\n\n# Plot with both points and lines\nplot(x, y, type = 'b', pch = 19, main = 'Plot with Points and Lines')\n\n# Histogram-like vertical lines\nplot(x, y, type = 'n', main = 'Histogram-like Vertical Lines')\nfor(i in 1:length(x)) {\n  segments(x[i], 0, x[i], y[i], col = 'blue', lwd = 2)\n}\ndev.off()",True,"User did not specify point symbols, line colors, or titles"
6,2025-10-21,?graphics::barplot,Make a barplot of gross national product for each year using the longley data,"barplot(GNP ~ Year, data = longley)",make_plot,"png(filename)\n# Load the longley dataset\ndata(longley)\n\n# Create a barplot of Gross National Product for each year\nbarplot(longley$GNP, names.arg = longley$Year, xlab = ""Year"", ylab = ""Gross National Product"", main = ""Gross National Product Over Years"")\ndev.off()",True,User did not specify title
7,2025-10-21,?graphics::barplot,"Use longley dataset, show stacked bars of numbers of employed and unemployed across years","barplot(cbind(Employed, Unemployed) ~ Year, data = longley)",make_plot,"png(filename)\n# Load the longley dataset\nlongley_data <- longley\n\n# Create a bar plot for Employed and Unemployed across years\nbarplot(t(as.matrix(longley_data[, c(""Employed"", ""Unemployed"")])),\n        beside = FALSE, \n        col = c(""lightblue"", ""lightcoral""), \n        names.arg = longley_data$Year,\n        xlab = ""Year"", \n        ylab = ""Number of People"", \n        main = ""Stacked Bar Plot of Employed and Unemployed Across Years"")\nlegend(""topright"", legend = c(""Employed"", ""Unemployed""), fill = c(""lightblue"", ""lightcoral""))\ndev.off()",True,"User did not specify colors, legend, or title"
8,2025-10-21,?graphics::barplot,"For the adult male passengers on the Titanic, make barplots of survivors and non-survivors subdivided by class","d.Titanic <- as.data.frame(Titanic)\nbarplot(Freq ~ Class + Survived, data = d.Titanic,\n        subset = Age == ""Adult"" & Sex == ""Male"",\n        main = ""barplot(Freq ~ Class + Survived, *)"", ylab = ""# {passengers}"", legend.text = TRUE)",make_plot,"png(filename)\n# Load the Titanic dataset\nurl <- ""https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv""\ndf <- read.csv(url)\n\n# Filter for adult male passengers\nadult_males <- df[df$Sex == ""male"" & df$Age >= 18, ]\n\n# Create a table of survivors (1) and non-survivors (0) subdivided by class\nsurvival_class <- table(adult_males$Pclass, adult_males$Survived)\n\n# Convert table to a bar plot\nbarplot(survival_class, beside = TRUE, col = c(""red"", ""green""),\n        legend.text = c(""Non-Survivors"", ""Survivors""),\n        xlab = ""Class"", ylab = ""Number of Passengers"",\n        main = ""Survivors and Non-Survivors of Adult Male Passengers on the Titanic"")\ndev.off()",False,"Don't download Titanic data, use R's built-in dataset, use stacked bars, label classes"
9,2025-10-21,?graphics::barplot,"Using the VADeaths dataset,  plot death rates in each category with separate bars for each age range. Include a legend for age ranges and title the plot ""Death Rates in Virginia""","barplot(VADeaths, beside = TRUE,\n        col = c(""lightblue"", ""mistyrose"", ""lightcyan"",\n                ""lavender"", ""cornsilk""),\n        legend.text = rownames(VADeaths), ylim = c(0, 100))\ntitle(main = ""Death Rates in Virginia"", font.main = 4)",make_plot,"png(filename)\nbarplot(VADeaths, beside=TRUE, main='Death Rates in Virginia',\nxlab='Categories', ylab='Death Rates',\nlegend=rownames(VADeaths), col=rainbow(nrow(VADeaths)))\ndev.off()",True,"User did not specify bar colors, y-axis range, or axis labels"
10,2025-10-21,?graphics::barplot,"Stacked barplot of death rates in Virginia with ages indicated by shading lines, steeper for higher age","barplot(VADeaths, angle = 15+10*1:5, density = 20, col = ""black"",\n        legend.text = rownames(VADeaths))\ntitle(main = list(""Death Rates in Virginia"", font = 4))",make_plot,"png(filename)\n# Sample data for stacked barplot (Replace this with the actual data)\nage_groups <- c('0-14', '15-29', '30-44', '45-64', '65+')\ndeath_rates <- c(10, 20, 30, 40, 50)\n\n# Create a barplot with shading lines according to age\nbarplot(death_rates, names.arg=age_groups, col=rainbow(length(death_rates)),\n        main='Death Rates in Virginia', xlab='Age Groups', ylab='Death Rates',\n        beside=FALSE)\n\n# Add shading lines for ages\nfor (i in seq_along(death_rates)) {\n  segments(i - 0.5, 0, i - 0.5, death_rates[i], col='black', lwd=i*0.5, lty=2)\n}\ndev.off()",False,"Use categories on x-axis, stacked bars for age groups, and shading lines without colors"
11,2025-10-21,?graphics::boxplot,boxplot insect counts for spray type,"boxplot(count ~ spray, data = InsectSprays, col = ""lightgray"")",make_plot,"png(filename)\ndf <- read.csv('https://raw.githubusercontent.com/vincentarelbundock/rdatasets/master/csv/datasets/InsectSprays.csv')\nboxplot(count ~ spray, data = df, xlab = 'Spray Type', ylab = 'Insect Counts', main = 'Boxplot of Insect Counts by Spray Type')\ndev.off()",True,"Plot is correct, but don't download CSV - use R's builtin dataset"
12,2025-10-21,?graphics::boxplot,Show log response vs treatment for orchard sprays,"boxplot(decrease ~ treatment, data = OrchardSprays, col = ""bisque"", log = ""y"")",make_plot,"png(filename)\n# Simulated data for orchard sprays\nset.seed(42)\ntreatment <- rep(c(""Spray A"", ""Spray B"", ""Control""), each = 30)\nresponse <- c(rnorm(30, mean = 5, sd = 1), rnorm(30, mean = 6, sd = 1.2), rnorm(30, mean = 4.5, sd = 1))\ndf <- data.frame(treatment, response)\n\n# Apply log transformation\nlog_response <- log(df$response)\n\n# Plot\nboxplot(log_response ~ treatment, data = df,\n        xlab = ""Treatment"",\n        ylab = ""Log of Response"",\n        main = ""Log Response vs Treatment for Orchard Sprays"",\n        col = c(""lightblue"", ""lightgreen"", ""lightcoral""))\ndev.off()",False,Incorrect data: do not generate random values. Use R's builtin dataset.
13,2025-10-21,?graphics::boxplot,"For tooth growth of guinea pigs, make side-by-side box plots of tooth length for ascorbic acid and orange juice at different vitamin C doses. Color the bars ascorbic acid - yellow and orange juice - orange","boxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset = supp == ""VC"", col = ""yellow"",\n        main = ""Guinea Pigs' Tooth Growth"",\n        xlab = ""Vitamin C dose mg"",\n        ylab = ""tooth length"",\n        xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = ""i"")\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        subset = supp == ""OJ"", col = ""orange"")\nlegend(2, 9, c(""Ascorbic acid"", ""Orange juice""),\n       fill = c(""yellow"", ""orange""))",make_plot,"png(filename)\n # Load the ToothGrowth dataset\n data(ToothGrowth)\n \n # Convert the dose to a factor for better plotting\n ToothGrowth$dose <- as.factor(ToothGrowth$dose)\n \n # Set up colors for the boxplots\n box_colors <- c(""yellow"", ""orange"")\n \n # Create the boxplot\n boxplot(len ~ supp * dose, data = ToothGrowth, \n         col = box_colors, \n         main = ""Tooth Length by Supplement and Dose"", \n         xlab = ""Vitamin C Dose and Supplement Type"", \n         names = c(""0.5mg Ascorbic Acid"", ""0.5mg Orange Juice"", ""1.0mg Ascorbic Acid"", ""1.0mg Orange Juice"", ""2.0mg Ascorbic Acid"", ""2.0mg Orange Juice""), \n         ylab = ""Tooth Length"")\n dev.off()",False,Correct the swapped labels for ascorbic acid and orange juice
14,2025-10-21,?graphics::boxplot,"For tooth growth of guinea pigs, make side-by-side box plots of tooth length for ascorbic acid and orange juice at different vitamin C doses. Color the bars ascorbic acid - yellow and orange juice - orange","boxplot(len ~ dose:supp, data = ToothGrowth,\n        boxwex = 0.5, col = c(""orange"", ""yellow""),\n        main = ""Guinea Pigs' Tooth Growth"",\n        xlab = ""Vitamin C dose mg"", ylab = ""tooth length"",\n        sep = "":"", lex.order = TRUE, ylim = c(0, 35), yaxs = ""i"")",make_plot,"png(filename)\n\ndata(ToothGrowth)\n\n# Convert the dose variable to a factor\nToothGrowth$dose <- as.factor(ToothGrowth$dose)\n\n# Define colors for the boxplots\ncolors <- c(""yellow"", ""orange"")\n\n# Create side-by-side boxplots\nboxplot(len ~ supp * dose, data = ToothGrowth, \n        col = colors, \n        main = ""Tooth Length by Supplement and Dose"", \n        xlab = ""Dose and Supplement"", \n        ylab = ""Tooth Length"",\n        xaxt='n')\n\n# Customize x-axis labels\naxis(1, at=c(1, 2, 3, 4), labels=c(""Ascorbic Acid 0.5"", ""Ascorbic Acid 1.0"", ""Orange Juice 0.5"", ""Orange Juice 1.0""))\n\ndev.off()",False,Correct the swapped labels for ascorbic acid and orange juice
15,2025-10-22,?graphics::cdplot,"You have the following data for NASA space shuttle o-ring failures where 1 means 'no' and 2 means 'yes': fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1) temperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81) Make a conditional density plot of o-ring failures given temperature","## NASA space shuttle o-ring failures\nfail <- factor(c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n                 1, 2, 1, 1, 1, 1, 1),\n               levels = 1:2, labels = c(""no"", ""yes""))\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70,\n                 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n## CD plot\ncdplot(fail ~ temperature)",make_plot,"png(filename)\n# Define the data\nfail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n# Create a data frame\ndata <- data.frame(fail, temperature)\n\n# Create a conditional density plot\nplot(density(temperature[data$fail == 1]), main='Conditional Density of O-ring Failures by Temperature', xlab='Temperature (F)', ylab='Density', col='blue', lwd=2)\nlines(density(temperature[data$fail == 2]), col='red', lwd=2)\nlegend('topright', legend=c('No Failure (1)', 'Failure (2)'), col=c('blue', 'red'), lwd=2)\n\ndev.off()",False,Use cdplot()
16,2025-10-22,?graphics::cdplot,"You have the following data for NASA space shuttle o-ring failures where 1 means 'no' and 2 means 'yes': fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1) temperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81) Make a conditional density plot of o-ring failures given temperature, with failures (""yes"") as the first variable","## NASA space shuttle o-ring failures\nfail <- factor(c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n                 1, 2, 1, 1, 1, 1, 1),\n               levels = 1:2, labels = c(""no"", ""yes""))\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70,\n                 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n## highlighting for failures\ncdplot(fail ~ temperature, ylevels = 2:1)",make_plot,"png(filename)\nfail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n# Create a conditional density plot\nplot(density(temperature[fail == 2]), col = 'red', lwd = 2, xlim = c(50, 85), ylim = c(0, 0.1),\n     xlab = 'Temperature', ylab = 'Density', main = 'Conditional Density Plot of O-Ring Failures')\nlines(density(temperature[fail == 1]), col = 'blue', lwd = 2)\nlegend('topright', legend = c('Failures (yes)', 'No Failures (no)'), col = c('red', 'blue'), lty = 1, lwd = 2)\ndev.off()",False,Use cdplot()
17,2025-10-22,?graphics::cdplot,"You have the following data for NASA space shuttle o-ring failures where 1 means 'no' and 2 means 'yes': fail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1) temperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81) Plot a red line showing cumulative conditional density of o-ring failures given temperature. Overlay points for failure/no failure observations plotted at probability = 1 or 0.","## NASA space shuttle o-ring failures\nfail <- factor(c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n                 1, 2, 1, 1, 1, 1, 1),\n               levels = 1:2, labels = c(""no"", ""yes""))\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70,\n                 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\n\n## scatter plot with conditional density\ncdens <- cdplot(fail ~ temperature, plot = FALSE)\nplot(I(as.numeric(fail) - 1) ~ jitter(temperature, factor = 2),\n     xlab = ""Temperature"", ylab = ""Conditional failure probability"")\nlines(53:81, 1 - cdens[[1]](53:81), col = 2)",make_plot,"png(filename)\nfail <- c(2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)\ntemperature <- c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)\ndens <- density(temperature[fail == 2])\nplot(dens, main = ""Cumulative Conditional Density of O-Ring Failures Given Temperature"", xlab = ""Temperature"", ylab = ""Density"", col = 'red', lwd = 2)\npoints(temperature[fail == 2], rep(0, sum(fail == 2)), col = 'red', pch = 19)\npoints(temperature[fail == 1], rep(1, sum(fail == 1)), col = 'blue', pch = 19)\ndev.off()",False,Use cdplot()
18,2025-10-22,?graphics::coplot,For Tonga Trench Earthquakes plot latitude vs longitude conditioned on depth - use coplot() with quakes dataset,"coplot(lat ~ long | depth, data = quakes)",,,False,No plot generated (circular agent calls)
19,2025-10-22,?graphics::coplot,For Tonga Trench Earthquakes plot latitude vs longitude conditioned on depth - use coplot() with quakes dataset,"coplot(lat ~ long | depth, data = quakes)",make_plot,"png(filename)\n# Load the quakes dataset\nquakes <- datasets::quakes\n\n# Create a coplot for latitude vs longitude conditioned on depth\ncoplot(lat ~ long | depth, data = quakes, row = 1, col = 1)\ndev.off()",True,User didn't specify number of rows
20,2025-10-22,?graphics::coplot,For Tonga Trench Earthquakes plot latitude vs longitude conditioned on four intervals of depth with an overlap of 0.1 - use coplot() with quakes dataset,"given.depth <- co.intervals(quakes$depth, number = 4, overlap = .1)\ncoplot(lat ~ long | depth, data = quakes, given.values = given.depth, rows = 1)",make_plot,"png(filename)\n# Load the quakes dataset\n\n# Create breaks for the depth intervals\nbreaks <- seq(0, 600, by = 150)\n# Create labels for the depth intervals\nlabels <- c(""0-150"", ""150-300"", ""300-450"", ""450-600"")\n\n# Classify the depth into intervals\nquakes$depth_interval <- cut(quakes$depth, breaks = breaks, labels = labels, include.lowest = TRUE)\n\n# Set up the coplot\ncoplot(lat ~ long | depth_interval, data = quakes, panel = panel.smooth, \n       col = ""blue"", xlab = ""Longitude"", ylab = ""Latitude"", \n       main = ""Tonga Trench Earthquakes: Latitude vs Longitude by Depth Intervals"")\n\ndev.off()",False,Use co.intervals to calculate intervals passed as given.values to coplot()
21,2025-10-22,?graphics::coplot,"Using warp breaks data, plot breaks conditioned on wool and tension - use coplot()","## given two factors\nIndex <- seq_len(nrow(warpbreaks)) # to get nicer default labels\ncoplot(breaks ~ Index | wool * tension, data = warpbreaks, show.given = 0:1)",make_plot,"png(filename)\n# Load the warpbreaks dataset\ndata(warpbreaks)\n\n# Create a coplot of breaks conditioned on wool and tension\ncoplot(breaks ~ tension | wool, data = warpbreaks, panel = panel.smooth)\ndev.off()",False,Condition on two factors (wool * tension)
22,2025-10-22,?graphics::contour,A Topographic Map of Maunga Whau (single color),"rx <- range(x <- 10*1:nrow(volcano))\nry <- range(y <- 10*1:ncol(volcano))\nry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2\ntcol <- terrain.colors(12)\npar(pty = ""s"", bg = ""lightcyan"")\nplot(x = 0, y = 0, type = ""n"", xlim = rx, ylim = ry, xlab = """", ylab = """")\nu <- par(""usr"")\nrect(u[1], u[3], u[2], u[4], col = tcol[8], border = ""red"")\ncontour(x, y, volcano, col = tcol[2], lty = ""solid"", add = TRUE,\n        vfont = c(""sans serif"", ""plain""))\ntitle(""A Topographic Map of Maunga Whau"", font = 4)\nabline(h = 200*0:4, v = 200*0:4, col = ""lightgray"", lty = 2, lwd = 0.1)",make_plot,"png(filename)\n# Setting up the dimensions and generation of the topographic map\nlibrary(maps)\nlibrary(magrittr)\nlibrary(raster)\n\n# Load elevation data for Maunga Whau\n# Assuming it's already loaded or defined in the environment\n# Create a sample elevation data for demonstration purposes\nx <- seq(-1, 1, length.out = 100)\ny <- seq(-1, 1, length.out = 100)\nz <- outer(x, y, function(x, y) { 1 - (x^2 + y^2) })  # Example elevation data\n\n# Create a topographic plot\nfilled.contour(x, y, z,\n               color.palette = terrain.colors(1),  # Single color\n               xlab=""Longitude"",\n               ylab=""Latitude"",\n               main=""Topographic Map of Maunga Whau"")\n\ndev.off()",False,"No plot generated: {""error"": ""there is no package called ‘maps’""}"
23,2025-10-22,?graphics::contour,A Topographic Map of Maunga Whau (single color) - use volcano data with contour(),"rx <- range(x <- 10*1:nrow(volcano))\nry <- range(y <- 10*1:ncol(volcano))\nry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2\ntcol <- terrain.colors(12)\npar(pty = ""s"", bg = ""lightcyan"")\nplot(x = 0, y = 0, type = ""n"", xlim = rx, ylim = ry, xlab = """", ylab = """")\nu <- par(""usr"")\nrect(u[1], u[3], u[2], u[4], col = tcol[8], border = ""red"")\ncontour(x, y, volcano, col = tcol[2], lty = ""solid"", add = TRUE,\n        vfont = c(""sans serif"", ""plain""))\ntitle(""A Topographic Map of Maunga Whau"", font = 4)\nabline(h = 200*0:4, v = 200*0:4, col = ""lightgray"", lty = 2, lwd = 0.1)",make_plot,"png(filename)\n\n# Load the volcano data\nz <- volcano\n\n# Create a topographic map using contour\ncontour(z, col = \""black\"", lwd = 2, xlab = \""X\"", ylab = \""Y\"",\n        main = \""Topographic Map of Maunga Whau\"")\n\ndev.off()",True,
24,2025-10-22,?graphics::dotchart,Dotplot Virginia deaths - use VADeaths and dotchart(),"dotchart(VADeaths, main = ""Death Rates in Virginia - 1940"")",make_plot,"png(filename)\ndata(VADeaths)\ndotchart(VADeaths, main=""Virginia Deaths"", xlab=""Deaths"", ylab=""Causes"")\ndev.off()",True,
25,2025-10-22,?graphics::dotchart,"Dotplot Virginia deaths with age as first group,  x axis from 0 to 100% - use VADeaths and dotchart()","op <- par(xaxs = ""i"")  # 0 -- 100%\ndotchart(t(VADeaths), xlim = c(0,100), bg = ""skyblue"",\n         main = ""Death Rates in Virginia - 1940"", xlab = ""rate [ % ]"",\n         ylab = ""Grouping:  Age  x   Urbanity . Gender"")",make_plot,"png(filename)\n# Load the dataset\ndata(VADeaths)\n# Convert the counts to proportions\nVADeaths_prop <- VADeaths / rowSums(VADeaths)\n# Create a dotplot\npar(mar = c(5, 5, 2, 2))\ndotchart(VADeaths_prop, xlim = c(0, 1), main = \""Virginia Deaths by Age Group\"", xlab = \""Proportion\"", ylab = \""Age Group\"", pch = 16)\ndev.off()",False,Use t(VADeaths) to get transpose with age on columns
26,2025-10-22,?graphics::filled.contour,Plot topography of Maunga Whau with terrain colors - use volcano data and filled.contour(),"x <- 10*1:nrow(volcano)\ny <- 10*1:ncol(volcano)\nfilled.contour(x, y, volcano,\n    color.palette = function(n) hcl.colors(n, ""terrain""),\n    plot.title = title(main = ""The Topography of Maunga Whau"",\n    xlab = ""Meters North"", ylab = ""Meters West""),\n    plot.axes = { axis(1, seq(100, 800, by = 100))\n                  axis(2, seq(100, 600, by = 100)) },\n    key.title = title(main = ""Height\n(meters)""),\n    key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1\nmtext(paste(""filled.contour(.) from"", R.version.string),\n      side = 1, line = 4, adj = 1, cex = .66)",make_plot,"png(filename)\n# Load the required data\nlibrary(sp)\n\n# Load volcano dataset and create a matrix\nvolcano_data <- volcano\n\n# Set up filled contour plot\nfilled.contour(volcano_data,\n               color.palette = terrain.colors,\n               xlab = ""X Coordinate"",\n               ylab = ""Y Coordinate"",\n               main = ""Topography of Maunga Whau"")\ndev.off()",True,
27,2025-10-22,?graphics::grid,"Plot iris sepal length vs width, color by species, ten tick marks on each axis, add grid","## change the desired number of tick marks:\npar(lab = c(10, 10, 7))\n\nwith(iris,\n     {\n     plot(Sepal.Length, Sepal.Width, col = as.integer(Species),\n          xlim = c(4, 8), ylim = c(2, 4.5), panel.first = grid(),\n          main = ""with(iris,  plot(...., panel.first = grid(), ..) )"")\n     }\n    )",make_plot,"png(filename)\n# Load the iris dataset\n\ndata(iris)\n\n# Set up the plot area with grid\nplot(iris$Sepal.Length, iris$Sepal.Width,\n     xlab = ""Sepal Length"",\n     ylab = ""Sepal Width"",\n     pch = 19,\n     col = iris$Species,\n     main = ""Iris Sepal Length vs Width"")\n\n# Add legend\nlegend(""topright"", legend = levels(iris$Species), col = 1:3, pch = 19)\n\n# Add grid\ngrid()\n\n# Customize tick marks\naxis(1, at = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 10))\naxis(2, at = seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 10))\n\ndev.off()",False,Use par(lab = ) to change number of tick marks
